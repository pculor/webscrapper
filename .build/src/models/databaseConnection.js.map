{"version":3,"file":"databaseConnection.js","sourceRoot":"/","sources":["src/models/databaseConnection.ts"],"names":[],"mappings":";;;;;AAAA,4CAAoB;AACpB,oDAA4B;AAC5B,sEAA6C;AAC7C,8DAA0C;AAE1C,MAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,IAAI,aAAa,CAAC;AAClD,MAAM,QAAQ,GAAG,gBAAU,CAAC,GAAG,CAAC,CAAC;AAEjC,gBAAM,CAAC,MAAM,EAAE,CAAC;AAEhB,MAAM,KAAK,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AAEpC,MAAM,MAAM,GAAG;IACd,IAAI,EAAE,KAAK,CAAC,QAAQ;IACpB,QAAQ,EAAE,KAAK,CAAC,QAAQ;IACxB,IAAI,EAAE,KAAK,CAAC,QAAQ;IACpB,IAAI,EAAE,KAAK,CAAC,IAAI;IAChB,QAAQ,EAAE,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;CACtC,CAAC;AAEF,MAAM,EAAE,IAAI,EAAE,GAAG,YAAE,CAAC;AAEpB,MAAM,IAAI,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,CAAC;AAE9B,MAAM,IAAI,GAAG,GAAG,EAAE;IACjB,MAAM,GAAG,GAAG,wBAAa,CAAC;IAC1B,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,EAAE;QACvB,IAAI,GAAG,EAAE,CAAC;YACT,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC7B,CAAC;aAAM,CAAC;YACP,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;QACrC,CAAC;IACF,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,OAAO,GAAG,GAAG,EAAE;IACpB,IAAI,CAAC,OAAO,EAAE;SACZ,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;QAChB,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC;QAC/C,IAAI,MAAM,EAAE,CAAC;YACZ,IAAI,EAAE,CAAC;YACP,MAAM,CAAC,OAAO,EAAE,CAAC;QAClB,CAAC;IACF,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,GAAG,OAAO,CAAC,GAAG,CAAC,mCAAmC,GAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChF,CAAC,CAAC;AAEF,OAAO,EAAE,CAAC;AAEV,MAAM,kBAAkB,GAAG;IAC1B,KAAK,EAAE,CAAC,IAAI,EAAE,MAAM,EAAE,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC;CACjD,CAAC;AACF,kBAAe,EAAE,OAAO,EAAE,kBAAkB,EAAE,CAAC","sourcesContent":["import pg from 'pg';\nimport dotenv from 'dotenv';\nimport databaseTable from './databaseTables';\nimport envConfigs from '../config/config';\n\nconst env = process.env.NODE_ENV || 'development';\nconst dbConfig = envConfigs[env];\n\ndotenv.config();\n\nconst dbUrl = new URL(dbConfig.url);\n\nconst config = {\n\tuser: dbUrl.username,\n\tpassword: dbUrl.password,\n\thost: dbUrl.hostname,\n\tport: dbUrl.port,\n\tdatabase: dbUrl.pathname.split('/')[1],\n};\n\nconst { Pool } = pg;\n\nconst pool = new Pool(config);\n\nconst seed = () => {\n\tconst qry = databaseTable;\n\tpool.query(qry, (err) => {\n\t\tif (err) {\n\t\t\tconsole.log(err.toString());\n\t\t} else {\n\t\t\tconsole.log('Migration Successful');\n\t\t}\n\t});\n};\n\nconst migrate = () => {\n\tpool.connect()\n\t\t.then((client) => {\n\t\t\tconsole.log('database connection established');\n\t\t\tif (client) {\n\t\t\t\tseed();\n\t\t\t\tclient.release();\n\t\t\t}\n\t\t}).catch((err) => { console.log(`database connection established ${err}`); });\n};\n\nmigrate();\n\nconst databaseConnection = {\n\tquery: (text, params) => pool.query(text, params),\n};\nexport default { migrate, databaseConnection };\n"]}